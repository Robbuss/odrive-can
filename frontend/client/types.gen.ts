// This file is auto-generated by @hey-api/openapi-ts

/**
 * ArmDisarmResult
 */
export type ArmDisarmResult = {
    /**
     * Status
     */
    status: 'armed' | 'disarmed' | 'error';
    /**
     * Detail
     */
    detail?: string | null;
};

/**
 * CalibrateResponse
 */
export type CalibrateResponse = {
    /**
     * Ok
     */
    ok?: boolean | null;
    /**
     * Detail
     */
    detail?: string | null;
    [key: string]: unknown | (boolean | null) | (string | null) | undefined;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * JointConfigureBody
 */
export type JointConfigureBody = {
    /**
     * Kp
     */
    kp?: number | null;
    /**
     * Ki
     */
    ki?: number | null;
    /**
     * Kd
     */
    kd?: number | null;
    /**
     * Min Pos
     */
    min_pos?: number | null;
    /**
     * Max Pos
     */
    max_pos?: number | null;
    /**
     * Save Config
     */
    save_config?: boolean | null;
};

/**
 * JointStatusWithConfig
 */
export type JointStatusWithConfig = {
    /**
     * Kp
     */
    kp?: number | null;
    /**
     * Ki
     */
    ki?: number | null;
    /**
     * Kd
     */
    kd?: number | null;
    /**
     * Min Pos
     */
    min_pos?: number | null;
    /**
     * Max Pos
     */
    max_pos?: number | null;
    /**
     * Position
     */
    position?: number | null;
    /**
     * Velocity
     */
    velocity?: number | null;
    /**
     * Accel
     */
    accel?: number | null;
    /**
     * Torque
     */
    torque?: number | null;
    /**
     * Supply V
     */
    supply_v?: number | null;
    /**
     * Motor Temp
     */
    motor_temp?: number | null;
    /**
     * Controller Temp
     */
    controller_temp?: number | null;
    /**
     * Mode
     */
    mode?: unknown | null;
    /**
     * Fault Code
     */
    fault_code?: number | null;
    /**
     * Error Flags
     */
    error_flags?: {
        [key: string]: unknown;
    } | null;
    /**
     * Target Position
     */
    target_position?: number | null;
    /**
     * Target Velocity
     */
    target_velocity?: number | null;
    /**
     * Target Accel
     */
    target_accel?: number | null;
    /**
     * Target Torque
     */
    target_torque?: number | null;
    [key: string]: unknown | (number | null) | (number | null) | (number | null) | (number | null) | (number | null) | (number | null) | (number | null) | (number | null) | (number | null) | (number | null) | (number | null) | (number | null) | (unknown | null) | (number | null) | ({
        [key: string]: unknown;
    } | null) | (number | null) | (number | null) | (number | null) | (number | null) | undefined;
};

/**
 * JointSummary
 */
export type JointSummary = {
    /**
     * Id
     */
    id: string;
    /**
     * Type
     */
    type: 'odrive' | 'moteus';
    /**
     * Initialized
     */
    initialized: boolean;
};

/**
 * MoveResponse
 */
export type MoveResponse = {
    /**
     * Ok
     */
    ok: boolean;
    /**
     * Cmd Id
     */
    cmd_id: string;
    [key: string]: unknown | boolean | string;
};

/**
 * RollupPoint
 */
export type RollupPoint = {
    /**
     * Bucket
     */
    bucket: string;
    /**
     * Joint Id
     */
    joint_id: string;
    /**
     * Run Id
     */
    run_id?: number | null;
    /**
     * Avg Position
     */
    avg_position?: number | null;
    /**
     * Min Position
     */
    min_position?: number | null;
    /**
     * Max Position
     */
    max_position?: number | null;
    /**
     * Avg Velocity
     */
    avg_velocity?: number | null;
    /**
     * Avg Torque
     */
    avg_torque?: number | null;
    /**
     * Avg Supply V
     */
    avg_supply_v?: number | null;
};

/**
 * RunStopOut
 */
export type RunStopOut = {
    /**
     * Run Id
     */
    run_id: number;
    /**
     * Ended At
     */
    ended_at: string;
};

/**
 * SampleIn
 */
export type SampleIn = {
    /**
     * Ts
     */
    ts?: string | null;
    /**
     * Position
     */
    position: number;
    /**
     * Velocity
     */
    velocity?: number | null;
    /**
     * Accel
     */
    accel?: number | null;
    /**
     * Torque
     */
    torque?: number | null;
    /**
     * Supply V
     */
    supply_v?: number | null;
    /**
     * Motor Temp
     */
    motor_temp?: number | null;
    /**
     * Controller Temp
     */
    controller_temp?: number | null;
    /**
     * Mode
     */
    mode?: string | null;
    /**
     * Fault Code
     */
    fault_code?: number | null;
    /**
     * Error Flags
     */
    error_flags?: number | null;
    /**
     * Target Position
     */
    target_position?: number | null;
    /**
     * Target Velocity
     */
    target_velocity?: number | null;
    /**
     * Target Accel
     */
    target_accel?: number | null;
    /**
     * Target Torque
     */
    target_torque?: number | null;
};

/**
 * SampleOut
 */
export type SampleOut = {
    /**
     * Ts
     */
    ts: string;
    /**
     * Position
     */
    position: number;
    /**
     * Velocity
     */
    velocity?: number | null;
    /**
     * Accel
     */
    accel?: number | null;
    /**
     * Torque
     */
    torque?: number | null;
    /**
     * Supply V
     */
    supply_v?: number | null;
    /**
     * Motor Temp
     */
    motor_temp?: number | null;
    /**
     * Controller Temp
     */
    controller_temp?: number | null;
    /**
     * Mode
     */
    mode?: string | null;
    /**
     * Fault Code
     */
    fault_code?: number | null;
    /**
     * Error Flags
     */
    error_flags?: number | null;
    /**
     * Target Position
     */
    target_position?: number | null;
    /**
     * Target Velocity
     */
    target_velocity?: number | null;
    /**
     * Target Accel
     */
    target_accel?: number | null;
    /**
     * Target Torque
     */
    target_torque?: number | null;
    /**
     * Joint Id
     */
    joint_id: string;
    /**
     * Run Id
     */
    run_id?: number | null;
};

/**
 * StartRunBody
 */
export type StartRunBody = {
    /**
     * Label
     */
    label?: string | null;
    /**
     * Meta
     */
    meta?: {
        [key: string]: unknown;
    } | null;
};

/**
 * StopResponse
 */
export type StopResponse = {
    /**
     * Status
     */
    status: 'stopped';
};

/**
 * TelemetryPayload
 */
export type TelemetryPayload = {
    /**
     * Run Id
     */
    run_id?: number | null;
    sample?: SampleIn | null;
    /**
     * Samples
     */
    samples?: Array<SampleIn> | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type ListJointsJointsIndexGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/joints/index';
};

export type ListJointsJointsIndexGetResponses = {
    /**
     * Response List Joints Joints Index Get
     * Successful Response
     */
    200: Array<JointSummary>;
};

export type ListJointsJointsIndexGetResponse = ListJointsJointsIndexGetResponses[keyof ListJointsJointsIndexGetResponses];

export type MoveJointJointsJointNameMovePostData = {
    body?: never;
    path: {
        /**
         * Joint Name
         */
        joint_name: string;
    };
    query: {
        /**
         * Position
         */
        position: number;
        /**
         * Velocity
         */
        velocity?: number | null;
        /**
         * Accel
         */
        accel?: number | null;
        /**
         * Hold
         */
        hold?: boolean;
        /**
         * Run Id
         */
        run_id?: number | null;
    };
    url: '/joints/{joint_name}/move';
};

export type MoveJointJointsJointNameMovePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type MoveJointJointsJointNameMovePostError = MoveJointJointsJointNameMovePostErrors[keyof MoveJointJointsJointNameMovePostErrors];

export type MoveJointJointsJointNameMovePostResponses = {
    /**
     * Successful Response
     */
    200: MoveResponse;
};

export type MoveJointJointsJointNameMovePostResponse = MoveJointJointsJointNameMovePostResponses[keyof MoveJointJointsJointNameMovePostResponses];

export type StopJointJointsJointNameStopPostData = {
    body?: never;
    path: {
        /**
         * Joint Name
         */
        joint_name: string;
    };
    query?: never;
    url: '/joints/{joint_name}/stop';
};

export type StopJointJointsJointNameStopPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StopJointJointsJointNameStopPostError = StopJointJointsJointNameStopPostErrors[keyof StopJointJointsJointNameStopPostErrors];

export type StopJointJointsJointNameStopPostResponses = {
    /**
     * Successful Response
     */
    200: StopResponse;
};

export type StopJointJointsJointNameStopPostResponse = StopJointJointsJointNameStopPostResponses[keyof StopJointJointsJointNameStopPostResponses];

export type StatusJointJointsJointNameStatusGetData = {
    body?: never;
    path: {
        /**
         * Joint Name
         */
        joint_name: string;
    };
    query?: never;
    url: '/joints/{joint_name}/status';
};

export type StatusJointJointsJointNameStatusGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StatusJointJointsJointNameStatusGetError = StatusJointJointsJointNameStatusGetErrors[keyof StatusJointJointsJointNameStatusGetErrors];

export type StatusJointJointsJointNameStatusGetResponses = {
    /**
     * Successful Response
     */
    200: JointStatusWithConfig;
};

export type StatusJointJointsJointNameStatusGetResponse = StatusJointJointsJointNameStatusGetResponses[keyof StatusJointJointsJointNameStatusGetResponses];

export type ArmAllJointsArmAllPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/joints/arm-all';
};

export type ArmAllJointsArmAllPostResponses = {
    /**
     * Response Arm All Joints Arm All Post
     * Successful Response
     */
    200: {
        [key: string]: ArmDisarmResult;
    };
};

export type ArmAllJointsArmAllPostResponse = ArmAllJointsArmAllPostResponses[keyof ArmAllJointsArmAllPostResponses];

export type DisarmAllJointsDisarmAllPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/joints/disarm-all';
};

export type DisarmAllJointsDisarmAllPostResponses = {
    /**
     * Response Disarm All Joints Disarm All Post
     * Successful Response
     */
    200: {
        [key: string]: ArmDisarmResult;
    };
};

export type DisarmAllJointsDisarmAllPostResponse = DisarmAllJointsDisarmAllPostResponses[keyof DisarmAllJointsDisarmAllPostResponses];

export type CalibrateJointJointsJointNameCalibratePostData = {
    body?: never;
    path: {
        /**
         * Joint Name
         */
        joint_name: string;
    };
    query?: {
        /**
         * State
         */
        state?: number;
        /**
         * Save Config
         */
        save_config?: boolean;
    };
    url: '/joints/{joint_name}/calibrate';
};

export type CalibrateJointJointsJointNameCalibratePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CalibrateJointJointsJointNameCalibratePostError = CalibrateJointJointsJointNameCalibratePostErrors[keyof CalibrateJointJointsJointNameCalibratePostErrors];

export type CalibrateJointJointsJointNameCalibratePostResponses = {
    /**
     * Successful Response
     */
    200: CalibrateResponse;
};

export type CalibrateJointJointsJointNameCalibratePostResponse = CalibrateJointJointsJointNameCalibratePostResponses[keyof CalibrateJointJointsJointNameCalibratePostResponses];

export type ConfigureJointData = {
    body: JointConfigureBody;
    path: {
        /**
         * Joint Name
         */
        joint_name: string;
    };
    query?: never;
    url: '/joints/{joint_name}/configure';
};

export type ConfigureJointErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ConfigureJointError = ConfigureJointErrors[keyof ConfigureJointErrors];

export type ConfigureJointResponses = {
    /**
     * Response Configurejoint
     * Successful Response
     */
    200: {
        [key: string]: boolean;
    };
};

export type ConfigureJointResponse = ConfigureJointResponses[keyof ConfigureJointResponses];

export type GetTelemetrySamplesData = {
    body?: never;
    path: {
        /**
         * Joint Name
         */
        joint_name: string;
    };
    query?: {
        /**
         * Limit
         */
        limit?: number;
        /**
         * Since Seconds
         */
        since_seconds?: number | null;
        /**
         * Run Id
         */
        run_id?: number | null;
    };
    url: '/telemetry/{joint_name}/samples';
};

export type GetTelemetrySamplesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTelemetrySamplesError = GetTelemetrySamplesErrors[keyof GetTelemetrySamplesErrors];

export type GetTelemetrySamplesResponses = {
    /**
     * Response Gettelemetrysamples
     * Successful Response
     */
    200: Array<SampleOut>;
};

export type GetTelemetrySamplesResponse = GetTelemetrySamplesResponses[keyof GetTelemetrySamplesResponses];

export type PostTelemetrySamplesData = {
    body: TelemetryPayload;
    path: {
        /**
         * Joint Name
         */
        joint_name: string;
    };
    query?: never;
    url: '/telemetry/{joint_name}/samples';
};

export type PostTelemetrySamplesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostTelemetrySamplesError = PostTelemetrySamplesErrors[keyof PostTelemetrySamplesErrors];

export type PostTelemetrySamplesResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetTelemetryRollupData = {
    body?: never;
    path: {
        /**
         * Joint Name
         */
        joint_name: string;
    };
    query?: {
        /**
         * Minutes
         */
        minutes?: number;
        /**
         * Run Id
         */
        run_id?: number | null;
    };
    url: '/telemetry/{joint_name}/rollup';
};

export type GetTelemetryRollupErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTelemetryRollupError = GetTelemetryRollupErrors[keyof GetTelemetryRollupErrors];

export type GetTelemetryRollupResponses = {
    /**
     * Response Gettelemetryrollup
     * Successful Response
     */
    200: Array<RollupPoint>;
};

export type GetTelemetryRollupResponse = GetTelemetryRollupResponses[keyof GetTelemetryRollupResponses];

export type StartRunData = {
    /**
     * Body
     */
    body?: StartRunBody | null;
    path?: never;
    query?: never;
    url: '/runs/start';
};

export type StartRunErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StartRunError = StartRunErrors[keyof StartRunErrors];

export type StartRunResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type StopRunData = {
    body?: never;
    path: {
        /**
         * Run Id
         */
        run_id: number;
    };
    query?: never;
    url: '/runs/{run_id}/stop';
};

export type StopRunErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StopRunError = StopRunErrors[keyof StopRunErrors];

export type StopRunResponses = {
    /**
     * Successful Response
     */
    200: RunStopOut;
};

export type StopRunResponse = StopRunResponses[keyof StopRunResponses];

export type ClientOptions = {
    baseUrl: 'http://backend:8000' | (string & {});
};