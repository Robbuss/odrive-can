// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { ListJointsJointsIndexGetData, ListJointsJointsIndexGetResponses, MoveJointJointsJointNameMovePostData, MoveJointJointsJointNameMovePostResponses, MoveJointJointsJointNameMovePostErrors, StopJointJointsJointNameStopPostData, StopJointJointsJointNameStopPostResponses, StopJointJointsJointNameStopPostErrors, StatusJointJointsJointNameStatusGetData, StatusJointJointsJointNameStatusGetResponses, StatusJointJointsJointNameStatusGetErrors, ArmAllJointsArmAllPostData, ArmAllJointsArmAllPostResponses, DisarmAllJointsDisarmAllPostData, DisarmAllJointsDisarmAllPostResponses, CalibrateJointJointsJointNameCalibratePostData, CalibrateJointJointsJointNameCalibratePostResponses, CalibrateJointJointsJointNameCalibratePostErrors, ConfigureJointData, ConfigureJointResponses, ConfigureJointErrors, GetTelemetrySamplesData, GetTelemetrySamplesResponses, GetTelemetrySamplesErrors, PostTelemetrySamplesData, PostTelemetrySamplesResponses, PostTelemetrySamplesErrors, GetTelemetryRollupData, GetTelemetryRollupResponses, GetTelemetryRollupErrors, StartRunData, StartRunResponses, StartRunErrors, StopRunData, StopRunResponses, StopRunErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List all configured joints
 * Return a list of all registered joints and their metadata.
 */
export const listJointsJointsIndexGet = <ThrowOnError extends boolean = false>(options?: Options<ListJointsJointsIndexGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListJointsJointsIndexGetResponses, unknown, ThrowOnError>({
        url: '/joints/index',
        ...options
    });
};

/**
 * Move Joint
 */
export const moveJointJointsJointNameMovePost = <ThrowOnError extends boolean = false>(options: Options<MoveJointJointsJointNameMovePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MoveJointJointsJointNameMovePostResponses, MoveJointJointsJointNameMovePostErrors, ThrowOnError>({
        url: '/joints/{joint_name}/move',
        ...options
    });
};

/**
 * Stop Joint
 */
export const stopJointJointsJointNameStopPost = <ThrowOnError extends boolean = false>(options: Options<StopJointJointsJointNameStopPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StopJointJointsJointNameStopPostResponses, StopJointJointsJointNameStopPostErrors, ThrowOnError>({
        url: '/joints/{joint_name}/stop',
        ...options
    });
};

/**
 * Status Joint
 */
export const statusJointJointsJointNameStatusGet = <ThrowOnError extends boolean = false>(options: Options<StatusJointJointsJointNameStatusGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<StatusJointJointsJointNameStatusGetResponses, StatusJointJointsJointNameStatusGetErrors, ThrowOnError>({
        url: '/joints/{joint_name}/status',
        ...options
    });
};

/**
 * Arm All
 */
export const armAllJointsArmAllPost = <ThrowOnError extends boolean = false>(options?: Options<ArmAllJointsArmAllPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ArmAllJointsArmAllPostResponses, unknown, ThrowOnError>({
        url: '/joints/arm-all',
        ...options
    });
};

/**
 * Disarm All
 */
export const disarmAllJointsDisarmAllPost = <ThrowOnError extends boolean = false>(options?: Options<DisarmAllJointsDisarmAllPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<DisarmAllJointsDisarmAllPostResponses, unknown, ThrowOnError>({
        url: '/joints/disarm-all',
        ...options
    });
};

/**
 * Calibrate Joint
 */
export const calibrateJointJointsJointNameCalibratePost = <ThrowOnError extends boolean = false>(options: Options<CalibrateJointJointsJointNameCalibratePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CalibrateJointJointsJointNameCalibratePostResponses, CalibrateJointJointsJointNameCalibratePostErrors, ThrowOnError>({
        url: '/joints/{joint_name}/calibrate',
        ...options
    });
};

/**
 * Configure Joint
 */
export const configureJoint = <ThrowOnError extends boolean = false>(options: Options<ConfigureJointData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ConfigureJointResponses, ConfigureJointErrors, ThrowOnError>({
        url: '/joints/{joint_name}/configure',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Samples
 */
export const getTelemetrySamples = <ThrowOnError extends boolean = false>(options: Options<GetTelemetrySamplesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTelemetrySamplesResponses, GetTelemetrySamplesErrors, ThrowOnError>({
        url: '/telemetry/{joint_name}/samples',
        ...options
    });
};

/**
 * Add Sample Or Batch
 */
export const postTelemetrySamples = <ThrowOnError extends boolean = false>(options: Options<PostTelemetrySamplesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTelemetrySamplesResponses, PostTelemetrySamplesErrors, ThrowOnError>({
        url: '/telemetry/{joint_name}/samples',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Rollup 1S
 */
export const getTelemetryRollup = <ThrowOnError extends boolean = false>(options: Options<GetTelemetryRollupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTelemetryRollupResponses, GetTelemetryRollupErrors, ThrowOnError>({
        url: '/telemetry/{joint_name}/rollup',
        ...options
    });
};

/**
 * Start Run
 */
export const startRun = <ThrowOnError extends boolean = false>(options?: Options<StartRunData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<StartRunResponses, StartRunErrors, ThrowOnError>({
        url: '/runs/start',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Stop Run
 */
export const stopRun = <ThrowOnError extends boolean = false>(options: Options<StopRunData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StopRunResponses, StopRunErrors, ThrowOnError>({
        url: '/runs/{run_id}/stop',
        ...options
    });
};