import { ref, onMounted, onBeforeUnmount } from 'vue'
import type { Ref } from 'vue'
import {
  moveJoint,
  getTelemetrySamples,
  getTelemetryRollup,
  startRun,
  stopRun,
} from '~/client/sdk.gen' // generated by Hey-API via operationId

type TelemetryMsg = {
  type: 'telemetry' | 'cmd_ack' | 'cmd_done' | 'fault' | 'ping'
  joint_id?: string
  ts?: string
  position?: number
  velocity?: number
  accel?: number
  torque?: number
  supply_v?: number
  motor_temp?: number | null
  controller_temp?: number | null
  mode?: string | null
  fault_code?: number | null
  error_flags?: number | null
  cmd_id?: string
  run_id?: number
  cmd?: any
}

export function useTelemetry(jointId: string) {
  const wsRef: Ref<WebSocket | null> = ref(null)
  const live: Ref<TelemetryMsg[]> = ref([])

  const MAX_MS = 10_000

  function connect() {
    if (wsRef.value) return
    // Vite proxy forwards /ws â†’ backend; keep path-only URL
    const url = `${location.protocol === 'https:' ? 'wss' : 'ws'}://${location.host}/ws/joint/${jointId}`
    const ws = new WebSocket(url)
    ws.onmessage = (ev) => {
      const msg: TelemetryMsg = JSON.parse(ev.data)
      if (msg.type === 'telemetry') {
        live.value.push(msg)
        // trim to last 10s
        const cutoff = Date.now() - MAX_MS
        while (live.value.length && new Date(live.value[0].ts || 0).getTime() < cutoff) {
          live.value.shift()
        }
      }
      // you can react to cmd_ack/cmd_done/fault if needed
    }
    ws.onclose = () => { wsRef.value = null }
    wsRef.value = ws
  }

  function disconnect() {
    wsRef.value?.close()
    wsRef.value = null
  }

  async function sendMove(body: { position: number; velocity?: number; accel?: number; hold?: boolean; run_id?: number }) {
    // operationId-driven call; NO raw URLs
    return await moveJoint({
      path: { joint_name: jointId },
      body,
    })
  }

  // Optional helpers you already have:
  const fetchRaw = (params: any) => getTelemetrySamples({ path: { joint_name: jointId }, query: params })
  const fetchRollup = (params: any) => getTelemetryRollup({ path: { joint_name: jointId }, query: params })
  const beginRun = () => startRun({})
  const endRun = (run_id: number) => stopRun({ path: { run_id } })

  onMounted(connect)
  onBeforeUnmount(disconnect)

  return { live, connect, disconnect, sendMove, fetchRaw, fetchRollup, beginRun, endRun }
}